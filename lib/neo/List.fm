// The polymorphic List type can hold a number of elements.
type List <A: Type> {
  nil,
  cons(head: A, tail: List(A)),
}

// Do all elements satisfy a condition?
List.all<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list {
    nil: Bool.true,
    cons: case cond(list.head) {
      true: List.all<>(cond, list.tail),
      false: Bool.false,
    }
  }

// Do any element satisfy a condition?
List.any<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list {
    nil: Bool.false,
    cons: case cond(list.head) {
      true: Bool.true,
      false: List.any<>(cond, list.tail),
    }
  }

// Appends element to the end of the list.
List.append<A: Type>(as: List(A), a: A): List(A)
  case as {
    nil: List.cons<>(a, List.nil<>),
    cons: List.cons<>(as.head, List.append<>(as.tail, a)),
  }

// Returns the element at given position.
List.at<A: Type>(index: Nat, list: List(A)): Maybe(A)
  case list {
    nil: Maybe.none<>,
    cons: case index {
      zero: Maybe.some<>(list.head),
      succ: List.at<>(index.pred, list.tail),
    }
  }

//// Returns the element at given position, backwards.
List.at_last<A: Type>(index: Nat, list: List(A)): Maybe(A)
  List.at<A>(index, List.reverse<>(list))

//// The bind function of the list Monad.
List.bind<A: Type,B: Type>(xs: List(A), f: A -> List(B)): List(B)
  List.flatten<>(List.map<,>(f)(xs))

List.chunk<A: Type>(n: Nat, xs: List(A)): Maybe(List(A))
  case n {
    zero: Maybe.some<>(List.nil<>),
    succ: case xs {
      nil : Maybe.none<>,
      cons: Maybe.bind<,>(List.chunk<>(n.pred,xs.tail))
            | (x) Maybe.some<>(List.cons<>(xs.head,x));
    }
  }

List.chunks_of<A: Type>(len: Nat, xs: List(A)): List(List(A))
  List.chunks_of.go<>(len, xs, len, List.nil<>)

List.chunks_of.go<A: Type>(
  len   : Nat,     // length of each chunk
  list  : List(A), // list to be split
  need  : Nat,     // number of vals to complete chunk
  chunk : List(A)  // current chunk
) : List(List(A))
  case list {
    nil : List.cons<>(List.reverse<>(chunk), List.nil<>),
    cons: case need {
      zero: 
        let head = List.reverse<>(chunk)
        let tail = List.chunks_of.go<>(len, list, len, List.nil<>)
        List.cons<>(head, tail),
      succ: 
        let chunk = List.cons<>(list.head, chunk)
        List.chunks_of.go<>(len, list.tail, need.pred, chunk)
    }
  }

// Proof that List.cons(f(x)) & List.map(f, xs) commute
List.commute_cons_map<A: Type, B: Type>(a :A, ls: List(A), f: A -> B)
  : Equal(List(B),
          List.cons<B>(f(a), List.map<A, B>(f, ls)),
          List.map<A, B>(f, List.cons<A>(a, ls)))
  case ls {
    nil : Equal.refl<_,_>,
    cons: Equal.refl<_,_>
  } : Equal(_, List.cons<>(f(a), List.map<,>(f, ls.self)), List.map<,>(f, List.cons<>(a, ls.self)))
  

// Concatenates two lists.
List.concat<A: Type>(as: List(A), bs: List(A)): List(A)
  case as {
    nil : bs,
    cons: List.cons<>(as.head, List.concat<>(as.tail,bs))
  }
 
// A theorem that a list made with List.cons is not the empty list
// List.cons_isnt_empty<A: Type>(
//   x:A,
//   xs: List(A)
// ): List.not_empty<A>(List.cons<A>(x,xs))
//   def y = List.cons<A>(x,xs)
  //case y:
  //with e : Equal(List(A),y,y.self) = Equal.to<List(A),y>;
  //| Empty.absurd<>(List.cons_isnt_nil<A>(x,xs,e));
  //| Unit.new;

// A theorem that List.cons isn't List.nil
List.cons_isnt_nil<A: Type>(x:A, xs: List(A))
  : Not(Equal(List(A),List.cons<A>(x,xs), List.nil<A>))
  def P ((x) case x { nil: Empty, cons: Unit }) :: List(A) -> Type 
  (e) Equal.rewrite<List(A), List.cons<A>(x,xs), List.nil<A>,P>(e, Unit.new)
  
// removes an element from the list at given index
List.delete_at<A: Type>(idx: Nat, list: List(A)): List(A)
  case idx {
    zero: List.tail<A>(list),
    succ: case list {
      nil : list,
      cons: List.cons<A>(list.head, List.delete_at<A>(idx.pred, list.tail))
    }
  }
// removes an element from the list at given index
List.delete_at.u32<A: Type>(idx: U32, list: List(A)): List(A)
  if U32.eql(idx, 0u) then
    List.tail<A>(list)
  else
    case list {
      nil : list,
      cons: List.cons<A>(list.head, List.delete_at.u32<A>(U32.sub(idx,1u), list.tail))
    }

// removes an element from the list with a user-supplied equality predicate
List.delete_by<A: Type>(p: A -> A -> Bool, a: A, as: List(A)): List(A)
  case as {
    nil : List.nil<>,
    cons: case p(a, as.head) {
      true : List.delete_by<>(p, a, as.tail),
      false: List.cons<>(as.head, List.delete_by<>(p, a, as.tail))
    }
  }

// Removes the first elements of a list.
List.drop<A: Type>(n: Nat, xs: List(A)):  List(A)
  case n {
    zero: xs,
    succ: case xs {
      nil : List.nil<>,
      cons: List.drop<>(n.pred,xs.tail)
    }
  }

List.drop_until<A: Type>(f: A -> Bool, xs: List(A)): List(A)
  List.drop_while<>((c) Bool.not(f(c)), xs)

// Remove elements while a condition is true
List.drop_while<A: Type>(f: A -> Bool, xs: List(A)): List(A)
  case xs {
    nil : List.nil<>,
    cons: case f(xs.head) {
      true : List.drop_while<>(f,xs.tail),
      false: xs
    }
  }

// checks if an element occurs in the list with a user-supplied equality predicate
List.elem<A: Type>(p: A -> A -> Bool, a: A, as: List(A)): Bool 
  case as {
    nil : Bool.false,
    cons: case p(a, as.head) {
      true : Bool.true,
      false: List.elem<A>(p, a, as.tail)
    }
  }

// Removes all elements that do not satisfy a condition.
List.filter<A: Type>(f: A -> Bool, xs: List(A)): List(A)
  case xs {
    nil : List.nil<>,
    cons: case f(xs.head) {
      true : List.cons<>(xs.head,List.filter<>(f, xs.tail)),
      false: List.filter<>(f, xs.tail)
    }
  }

//Finds the first occurrence that satisfies a condition
List.find<A: Type>(cond: A -> Bool, xs: List(A)): Maybe(A)
  case xs {
    nil : Maybe.none<>,
    cons: case cond(xs.head) {
      true : Maybe.some<>(xs.head),
      false: List.find<>(cond)(xs.tail)
    }
  }

// Finds the last element that satisfies a condition and its index.
List.find_last<A: Type>(xs: List(A), f: A -> Nat -> Bool): Maybe(Pair(A)(Nat))
  List.find_last.go<A>(xs,f,Nat.zero,Maybe.none<>)

List.find_last.go<A: Type>(
  xs: List(A),
  f: A -> Nat -> Bool,
  n: Nat,
  res: Maybe(Pair(A,Nat))
): Maybe(Pair(A,Nat))
  case xs {
    nil : res,
    cons:
      let res = case f(xs.head,n) {
        true : Maybe.some<>(Pair.new<,>(xs.head,n)),
        false: res
      }
      List.find_last.go<>(xs.tail,f,Nat.succ(n),res)
  }

// Flattens a list of lists into a single list.
List.flatten<A: Type>(xs: List(List(A))): List(A)
  case xs {
    nil : List.nil<>,
    cons: List.concat<>(xs.head, List.flatten<>(xs.tail))
  }

// Converts a list to its non-inductive Church encoding
List.fold<A: Type>(list: List(A)): <P: Type> -> P -> (A -> P -> P) -> P
  <P> (nil, cons)
  case list {
    nil : nil,
    cons: cons(list.head, List.fold<A>(list.tail)<P>(nil, cons))
  }

//List.fold1<A: Type>(xs: List(A))<ne: List.not_empty<A>(xs)>
  //: <P: Type> -> P -> (A -> P -> P) -> P
  //<P> (nil, cons)
  //case xs:
  //with ne : List.not_empty<>(xs.self) = ne;
  //| Empty.absurd<>(ne);
  //| List.fold<>(xs)<P>(nil,cons);

// Given two lists `xs` and `ys`, applies `f(xs[i],ys[i])` for all `i`.
List.fold_zip<A: Type, B: Type>(as: List(A), bs: List(B))<C: Type>(fn: A -> B -> C, nil: C, cons: C -> C -> C): C
  case as {
    nil : nil,
    cons: case bs {
      nil : nil,
      cons: cons(fn(as.head, bs.head), List.fold_zip<A,B>(as.tail,bs.tail)<C>(fn, nil, cons))
    }
  }

// Folds over a list, left associative
List.foldl<A: Type,B: Type>(b: B, f: A -> B -> B, xs: List(A)): B
  case xs {
    nil : b,
    cons: List.foldl<,>(f(xs.head,b), f, xs.tail)
}

//List.foldl1<A: Type>(f: A -> A -> A, xs: List(A), ne: List.not_empty<A>(xs)): A
  //case xs:
  //with ne : List.not_empty<>(xs.self) = ne;
  //| Empty.absurd<>(ne);
  //| List.foldl<A,A>(xs.head,f,xs.tail);

// Folds over a list, right associative
List.foldr<A: Type,B: Type>(b: B, f: A -> B -> B, xs: List(A)): B
  List.fold<A>(xs)<B>(b,f)

// Folds over a list, left associative
List.for<A: Type>(xs: List(A))<B: Type>(b: B, f: A -> B -> B): B
  case xs {
    nil : b,
    cons: List.for<A>(xs.tail)<B>(f(xs.head,b),f)
  }

// The functor instance for list
List.functor: Functor(List)
  Functor.new<List>(List.map)

// Proof that List.functor conforms to the functor laws
// List.functor.verified: VerifiedFunctor(List, List.functor)
//   VerifiedFunctor.new<List, List.functor>(List.map.id, List.map.comp)

// May get the head of a list
List.head<A: Type>(xs: List(A)): Maybe(A)
  case xs {
    nil : Maybe.none<>,
    cons: Maybe.some<>(xs.head)
  }

// May get the head of a list
List.head_with_default<A: Type>(default: A, xs: List(A)): A
  case xs {
    nil : default,
    cons: xs.head
  }

// Finds the first element that satisfies a condition and its index.
List.ifind<A: Type>(xs: List(A), f: A -> Nat -> Bool): Maybe(Pair(A,Nat))
  List.ifind.go<A>(xs,f,Nat.zero)

List.ifind.go<A: Type>(xs: List(A), f: A -> Nat -> Bool, i: Nat): Maybe(Pair(A,Nat))
  case xs {
    nil : Maybe.none<>,
    cons: case f(xs.head,i) {
      true : Maybe.some<>(Pair.new<,>(xs.head)(i)),
      false: List.ifind.go<>(xs.tail,f,Nat.succ(i))
    }
  }

// Folds over a list with an index, right associative
List.ifoldr.u32<A: Type,B: Type>(b: B, f: U32 -> A -> B -> B, xs: List(A)): B
  case xs {
    nil : b,
    cons: f(0u, xs.head, List.ifoldr.u32<,>(b, (i) f(U32.add(1u, i)), xs.tail))
  }

// Folds over a list, left associative
List.ifor<A: Type>(xs: List(A))<B: Type>(b: B, f: Nat -> A -> B -> B): B
  case xs {
    nil : b,
    cons: List.ifor<A>(xs.tail)<B>(f(0,xs.head,b), (n) f(Nat.succ(n)))
  }

// Folds over a list, left associative
List.ifor.u32<A: Type>(xs: List(A))<B: Type>(b: B, f: U32 -> A -> B -> B): B
  case xs {
    nil : b,
    cons: List.ifor.u32<A>(xs.tail)<B>(f(0u,xs.head,b), (n) f(U32.add(n,1u)))
  }

// Map over a list with the index
List.imap<A: Type,B: Type>(f: Nat -> A -> B, xs: List(A)): List(B)
  case xs {
    nil : List.nil<>,
    cons: List.cons<>(f(0,xs.head),List.imap<,>((n) f(Nat.succ(n)),xs.tail))
  }

// Map over a list with the index
List.imap.u32<A: Type,B: Type>(f: U32 -> A -> B, xs: List(A)): List(B)
  case xs {
    nil : List.nil<>,
    cons: List.cons<>(f(0u, xs.head),List.imap.u32<,>((n) f(U32.add(1u, n)), xs.tail))
  }

// Adds the index of each element in a list
List.indices<A: Type>(xs: List(A)): List(Pair(Nat,A))
  List.imap<A,Pair(Nat,A)>((i,x) {i,x}, xs)

// Adds the index of each element in a list
List.indices.u32<A: Type>(xs: List(A)): List(Pair(U32,A))
  List.imap<A,Pair(U32,A)>((i,x) {Nat.to_u32(i),x}, xs)

//// Get the all elements of a nonempty list except the last one
//List.init<A: Type>(xs: List(A), not_empty: List.not_empty<A>(xs)) : List(A)
  //case xs:
  //with ne : List.not_empty<A>(xs.self) = not_empty;
  //| Empty.absurd<>(ne);
  //| case xs.tail:
    //with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<List(A),xs.tail>;
    //| List.nil<>;
    //| def cne = List.cons_isnt_empty<A>(xs.tail.head,xs.tail.tail)
      //def xne = Equal.rewrite<_,_,_,(x) List.not_empty<A>(x)>(e,cne)
      //List.cons<>(xs.head,List.init<>(xs.tail,xne));;

List.insert_sort_nat.aux(n: Nat, ns: List(Nat)): List(Nat)
  case List.span<>(Nat.lte(n), ns) as spanned {
    new: List.concat<>(spanned.fst, List.cons<>(n, spanned.snd))
  }
  

// concrete implementation of insertion sort for nats
List.insert_sort_nat(ns: List(Nat)): List(Nat)
  List.foldr<,>(List.nil<>, List.insert_sort_nat.aux, ns)

// insert separators between elements, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
List.intercalate<A: Type>(sep: List(A), xs: List(List(A))): List(A)
  List.flatten<A>(List.intersperse<List(A)>(sep,xs))

// insert separators between elements, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
List.intersperse<A: Type>(sep: A, xs: List(A)): List(A)
  case xs {
    nil : List.nil<>,
    cons: case xs.tail {
      nil : List.pure<>(xs.head),
      cons: List.cons<>(xs.head,List.cons<>(sep,List.intersperse<A>(sep,xs.tail)))
    }
  }

//// Get the last element of a nonempty list
//List.last<A: Type>(xs: List(A), not_empty: List.not_empty<A>(xs)) : A
  //case xs:
  //with ne : List.not_empty<A>(xs.self) = not_empty;
  //| Empty.absurd<>(ne);
  //| case xs.tail:
    //with e : Equal(_, xs.tail.self,xs.tail) = Equal.to<List(A),xs.tail>;
    //| xs.head;
    //| def cne = List.cons_isnt_empty<A>(xs.tail.head,xs.tail.tail)
      //def xne = Equal.rewrite<_,_,_,(x) List.not_empty<A>(x)>(e,cne)
      //List.last<>(xs.tail,xne);;

// Computes the length of the list.
List.length<A: Type>(xs: List(A)): Nat
  List.length.go<>(xs, 0)

// Computes the length of the list.
List.length.go<A: Type>(xs: List(A), n: Nat): Nat
  case xs {
    nil : n,
    cons: List.length.go<A>(xs.tail, Nat.succ(n))
  }

// Computes the length of the list.
List.length.u32<A: Type>(xs: List(A)): U32
  List.length.u32.go<>(xs, 0u)

// Computes the length of the list.
List.length.u32.go<A: Type>(xs: List(A), n: U32): U32
  case xs {
    nil : n,
    cons: List.length.u32.go<A>(xs.tail, U32.add(1u, n))
  }

//List.map.comp<A: Type, B: Type, C: Type>(ls: List(A), g: (B -> C), h: (A -> B))
  //: Equal(List(C),
          //List.map<A, C>(Function.comp<A, B, C>(g, h), ls),
          //Function.comp<List(A), List(B), List(C)>(List.map<B, C>(g), List.map<A, B>(h))(ls))
  //case ls:
  //| Equal.to<_, List.map<,>(Function.comp<,,>(g, h), List.nil<>)>;
  //| let tail_eq = List.map.comp<,,>(ls.tail, g, h)
    //Equal.apply<_, _,
                //List.map<,>(Function.comp<,,>(g, h), ls.tail),
                //Function.comp<,,>(List.map<,>(g), List.map<,>(h), ls.tail), List.cons<>(Function.comp<,,>(g, h, ls.head))>(tail_eq);
  //: Equal(_, List.map<,>(Function.comp<,,>(g, h), ls.self), Function.comp<,,>(List.map<,>(g), List.map<,>(h))(ls.self));

// Applies a function to all elements of the list.
List.map<A: Type, B: Type>(f: A -> B, as: List(A)): List(B)
  case as {
    nil : List.nil<>,
    cons: List.cons<>(f(as.head),List.map<,>(f,as.tail))
  }

// Applies a function to all elements of the list.
List.mapped<A: Type>(as: List(A))<B: Type>(f: A -> B): List(B)
  case as {
    nil : List.nil<>,
    cons: List.cons<>(f(as.head),List.mapped<A>(as.tail)<B>(f))
  }

//List.map.id<A: Type>(ls: List(A)): Equal(List(A), List.map<A, A>(Function.id<A>, ls), ls)
  //case ls:
  //| Equal.to<_, List.map<,>(Function.id<>, List.nil<>)>;
  //| let tail_eq = List.map.id<>(ls.tail)
    //Equal.apply<_, _,
                //List.map<,>(Function.id<>, ls.tail),
                //ls.tail,
                //List.cons<>(ls.head)>(tail_eq);
  //: Equal(_, List.map<,>(Function.id<>, ls.self), ls.self);

// The monad instance for list
List.monad: Monad(List)
  Monad.new<List>(List.bind, List.pure)

// A proposition that a list is not the empty list
List.not_empty<A: Type>(xs: List(A)) : Type
  case xs {
    nil : Empty,
    cons: Unit
  }

List.null<A: Type>(xs: List(A)) : Bool
  case xs {
    nil : Bool.true,
    cons: Bool.false
  }

// Is any element true?
List.or(list: List(Bool)): Bool
  List.any<>((x) x)(list)

List.product(xs: List(Nat)) : Nat
  List.product.go(xs, Nat.zero)

List.product.go(xs: List(Nat), n: Nat) : Nat
  case xs {
    nil : Nat.zero,
    cons: List.product.go(xs.tail,Nat.mul(xs.head,n))
  }

// A list with only one element.
List.pure<A : Type>(x : A) : List(A)
  List.cons<A>(x)(List.nil<A>)

List.range(n: Nat): List(Nat)
  List.range.go(n, List.nil<>)

List.range.go(n: Nat, xs: List(Nat)): List(Nat)
  case n {
    zero: xs,
    succ: List.range.go(n.pred, List.cons<>(n, xs))
  }

// Reverse the order of the elements of the list
List.reverse<A: Type>(xs: List(A)) : List(A)
  List.reverse.go<>(xs,List.nil<>)

List.reverse.go<A: Type>(xs: List(A), res: List(A)): List(A)
  case xs {
    nil : res,
    cons: List.reverse.go<>(xs.tail,List.cons<>(xs.head,res))
  }

// turn a builder into a List
List.run_builder<A: Type>(lb: List.Builder(A)): List(A)
  lb(List.nil<>)

// Print a list
List.show<A: Type>(f: A -> String, xs: List(A)): String
  String.flatten(["[",String.intercalate(",", List.map<,>(f,xs)),"]"])

List.span<A: Type>(f: A -> Bool, xs: List(A)): Pair(List(A),List(A))
  case xs {
    nil : {List.nil<>, List.nil<>},
    cons: case f(xs.head) {
      true: 
        case List.span<>(f, xs.tail) as spanned {
          new: { List.cons<>(xs.head, spanned.fst), spanned.snd }
        },

      false: { List.nil<>, xs } 
    }
  }

List.split_at<A: Type>(n : Nat, xs: List(A)) : Pair(List(A),List(A))
  case xs {
    nil : { List.nil<>, List.nil<> },
    cons: case n {
      zero: { List.nil<>, xs },
      succ: case List.split_at<>(n.pred, xs.tail) as res {
        new: { List.cons<>(xs.head, res.fst), res.snd }
      }
    }
  }

List.subsequences<A: Type>(xs: List(A)): List(List(A))
  List.cons<>(List.nil<>,List.subsequences.go<>(xs))

List.subsequences.go<A: Type>(xs: List(A)): List(List(A))
  case xs {
    nil : List.nil<>,
    cons:
      let f = ((ys,r) List.cons<>(ys,List.cons<>(List.cons<>(xs.head,ys),r)))
           :: List(A) -> List(List(A)) -> List(List(A))
      List.cons<>
      | List.pure<>(xs.head);
      | List.foldr<,>(List.nil<>,f,List.subsequences.go<>(xs.tail));
  }

// Add the total of a list of natural numbers
List.sum(xs: List(Nat)) : Nat
  List.sum.go(xs, Nat.zero)

List.sum.go(xs: List(Nat), n: Nat) : Nat
  case xs {
    nil : n,
    cons: List.sum.go(xs.tail,Nat.add(xs.head,n))
  }

// Get the tail of a nonempty list
List.tail<A: Type>(xs: List(A)): List(A)
  case xs {
    nil : [],
    cons: xs.tail
  }

// Returns the first elements of a list, discards the rest.
List.take<A: Type>(n: Nat, xs: List(A)): List(A)
  case xs {
    nil : List.nil<>,
    cons: case n {
      zero: List.nil<>,
      succ: List.cons<>(xs.head,List.take<>(n.pred, xs.tail))
    }
  }

List.take_while<A: Type>(f: A -> Bool, xs: List(A)) : List(A)
  case xs {
    nil : List.nil<>,
    cons: case f(xs.head) {
      true : List.cons<>(xs.head,List.take_while<>(f,xs.tail)),
      false: List.nil<>
    }
  }

// convert a list to a builder
List.to_builder<A: Type>(list: List(A)) : List.Builder(A)
  List.to_builder.go<>(list, List.Builder.new<>)

List.to_builder.go<A: Type>(list: List(A), lb: List.Builder(A)) : List.Builder(A)
  case list {
    nil : lb,
    cons: List.to_builder.go<>(list.tail)(List.Builder.snoc<>(list.head, lb))
  }

List.uncons<A: Type>(xs: List(A)): Maybe(Pair(A,List(A)))
  case xs {
    nil : Maybe.none<>,
    cons: Maybe.some<>(Pair.new<,>(xs.head,xs.tail))
  }

List.unfoldr<A: Type, B: Type>(f: A -> Maybe(Pair(A,B)), a: A): List(B)
  List.unfoldr.go<A,B>(f, a, List.nil<B>)

List.unfoldr.go<A: Type, B: Type>(f: A -> Maybe(Pair(A,B)), a: A, bs: List(B)): List(B)
  case f(a) as res {
    none: List.nil<B>,
    some: case res.value as pair {
      new: List.unfoldr.go<A,B>(f, pair.fst, List.cons<B>(pair.snd, bs))
    }
  }

// Updates the element at given position
List.update_at<A: Type>(index: Nat, fn: A -> A, list: List(A)): List(A)
  case list {
    nil : [],
    cons: case index {
      zero: List.cons<>(fn(list.head), list.tail),
      succ: List.cons<>(list.head, List.update_at<A>(index.pred, fn, list.tail))
    }
  }

// Given two lists `xs` and `ys`, applies `f(xs[i],ys[i])` for all `i`.
List.zip_with<A: Type, B: Type, C: Type>(f: A -> B -> C, as: List(A), bs: List(B))
  : List(C)
  case as {
    nil : List.nil<>,
    cons: case bs {
      nil : List.nil<>,
      cons: List.cons<>(f(as.head,bs.head),List.zip_with<,,>(f,as.tail,bs.tail))
    }
  }

// concatenate two list builders
List.Builder.concat<A: Type>(a: List.Builder(A), b: List.Builder(A)): List.Builder(A)
   (x) a(b(x))

// prepend an element
List.Builder.cons<A: Type>(c: A, lb: List.Builder(A)) : List.Builder(A)
  (x) List.cons<>(c,lb(x))

// A lazy List constructor, useful for efficient concatenation
List.Builder(A: Type): Type
  List(A) -> List(A)

// construct a new builder (it's just the identity function)
List.Builder.new<A: Type> : List.Builder(A)
  (x) x

// append an element
List.Builder.snoc<A: Type>(c: A, lb: List.Builder(A)) : List.Builder(A)
  (x) lb(List.cons<>(c,x))

