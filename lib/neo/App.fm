type App.Action<S: Type> {
  state(state: S),
  print(text: String),
  post(room: Word(48), data: Word(256)),
  watch(room: Word(48)),
  resize(width: U32, height: U32),
}

type App.Event {
  init(time: U64, addr: Word(160), screen: Pair(U32,U32), mouse: Pair(U32,U32)),
  tick(time: U64, screen: Pair(U32,U32), mouse: Pair(U32,U32)),
  xkey(time: U64, down: Bool, code: U16),
  post(time: U64, room: Word(48), addr: Word(160), data: Word(256))
}

type App.Render {
  txt(text: String),
  vox(voxs: Image3D)
}

// A demo application that renders a square on the screen
App.demo: App(Pair(U32,U32))
  let vox = Image3D.alloc_capacity(256u)
  def init
    Pair.new<,>(64u, 64u)
  def draw(state)
    get mouse_x mouse_y = state
    App.Render.vox
    | use idx vox = U32.for<>(vox, 0u, 256u)
      let p_x = U32.sub(U32.add(mouse_x,U32.mod(idx,16u)),8u) // pixel x
      let p_y = U32.sub(U32.add(mouse_y,U32.div(idx,16u)),8u) // pixel y
      let pos = Pos32.new(p_x, p_y, 128u) // pixel pos (forms a square)
      let col = Col32.new(255u, 0u, 0u, 255u) // pixel color (red)
      let vox = Image3D.set_pos(idx, pos, vox)
      let vox = Image3D.set_col(idx, col, vox)
      vox;
  def when(event, state)
    case event{
      init: [],
      tick: [],
      xkey: [],
      post: []
    }
  App.new<>(init, draw, when)

type App<S: Type> {
  new(
  init: S,
  draw: S -> App.Render,
  when: App.Event -> S -> List(App.Action(S)))
}


