U32.0: U32
  U32.new(Word.zero(32))

U32.add(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.add<>(a_val, b_val))

U32.and(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.and<>(a_val, b_val))

U32.concat(a: U32, b: U32): U64
  get a_val = a
  get b_val = b 
  U64.new(Word.concat<><>(a_val, b_val))

U32.div(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.div<>(a_val, b_val))

// a == b
U32.eql(a: U32, b: U32): Bool
  get a_val = a 
  get b_val = b 
  Word.eql<>(a_val, b_val)

T U32
| U32.new(a: Word(32));

U32.for<S: Type>(state: S, from: U32, til: U32, func: U32 -> S -> S): S
  if U32.eql(from, til) then
    state
  else
    U32.for<S>(func(from, state), U32.inc(from), til, func)

// a >= b
U32.gte(a: U32, b: U32): Bool
  get a_val = a 
  get b_val = b 
  Word.gte<>(a_val, b_val)

// a > b
U32.gtn(a: U32, b: U32): Bool
  get a_val = a 
  get b_val = b 
  Word.gtn<>(a_val, b_val)

U32.inc(a: U32): U32
  get a_val = a 
  U32.new(Word.inc<>(a_val))

U32.length(str: String): U32
  U32.length(str)

// a <= b
U32.lte(a: U32, b: U32): Bool
  get a_val = a 
  get b_val = b 
  Word.lte<>(a_val, b_val)

// a < b
U32.ltn(a: U32, b: U32): Bool
  get a_val = a 
  get b_val = b 
  Word.ltn<>(a_val, b_val)

U32.mod(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.mod<>(a_val, b_val))

U32.mul(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.mul<>(a_val, b_val))

U32.needed_depth(size: U32): Nat
  U32.needed_depth.go(U32.sub(size, 1u))

U32.needed_depth.go(n: U32): Nat
  if U32.eql(n, 0u) then
    0
  else
    Nat.succ(U32.needed_depth.go(U32.shr(n,1u)))

U32.or(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.or<>(a_val, b_val))

U32.parse_hex(str: String): U32
  U32.new(Word.from_bits(32, Bits.parse_hex(str)))

U32.percent(p: U32, t: U32): U32
  U32.div(U32.mul(p, t), 100u)

U32.pow(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.pow<>(a_val, b_val))

U32.read_base(base: U32, str: String): U32
  U32.read_base(base, str)

U32.shl(n: U32, a: U32): U32
  U32.shl(n, a)

U32.shr(n: U32, a: U32): U32
  U32.shr(n, a)

U32.slice(i: U32, j: U32, str: String): String
  U32.slice(i, j, str)

U32.sub(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.sub<>(a_val, b_val))

U32.to_bits(a: U32): Bits
  get a_val = a 
  Word.to_bits<>(a_val)

U32.to_f64(a: U32): F64
  U32.to_f64(a)

U32.to_nat(a: U32): Nat
 get a_val = a 
 Word.to_nat<>(a_val)

// TODO: optimize
U32.to_string(n: U32): String
  Nat.to_string_base(10, U32.to_nat(n))

U32.xor(a: U32, b: U32): U32
  get a_val = a 
  get b_val = b 
  U32.new(Word.xor<>(a_val, b_val))

